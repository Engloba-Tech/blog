<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Engloba Tech - Blog</title><link>https://engloba-tech.github.io/blog/public/</link><description>Recent content on Engloba Tech - Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 30 Dec 2020 08:40:44 +0100</lastBuildDate><atom:link href="https://engloba-tech.github.io/blog/public/index.xml" rel="self" type="application/rss+xml"/><item><title>Configurando CD para mi aplicaci√≥n React Native a Google Play con App Center</title><link>https://engloba-tech.github.io/blog/public/posts/rn-appcenter-googleplay/</link><pubDate>Wed, 30 Dec 2020 08:40:44 +0100</pubDate><guid>https://engloba-tech.github.io/blog/public/posts/rn-appcenter-googleplay/</guid><description>
&lt;h3 id="devops-en-2021">Devops en 2021&lt;/h3>
&lt;p>√öltimamente, me atrevo a decir que en los √∫ltimos 4 o 5 a√±os, los equipos de desarrollo hemos mejorado mucho en cuanto a automatizaci√≥n de deploys y dem√°s. Ha habido un auge devops que ha hecho que la mayor√≠a de developers de bien entiendan y definan una pipeline y lo m√°s importante ahora entendemos la importancia de la automatizaci√≥n y como esto va vinculado a entregas r√°pidas y din√°micas que tanto remarca Agile. A d√≠a de hoy no podr√≠a hacer un despliegue manual de mis aplicaciones web, de echo al empezar un proyecto lo primero es montar el circuito de CD con un hello world y a partir de ah√≠ empezamos a montar features y lo que quieras.&lt;/p>
&lt;p>Las herramientas de CD/CI tambi√©n han evolucionado mucho y la adopci√≥n del cloud por la mayor√≠a de equipos tambi√©n tiene a ver en esta tend√©ncia&amp;hellip; En el caso de Engloba Tech a d√≠a de hoy usamos Azure Dev Ops para repos y la configuraci√≥n de pipelines de nuestras aplicaciones web. Para las apps nativas, la parte de build/deploy/distribute la hacemos desde App Center que es el antiguo Hockey App que en su d√≠a compr√≥ Microsoft y est√° totalmente especializado en build/deploy/distribute aplicaciones nativas iOS/Android y te da &amp;ldquo;cosas&amp;rdquo; OOB que si te las tuvieses que montar en una pipeline de Azure Dev Ops te costar√≠a mucho m√°s. Tienes una capa gratuita que te da 4 horas de agente al mes&amp;hellip; Nosotros al final hemos necesitado ampliar (es rollo 40‚Ç¨ mes ahora) pero porque tenemos bastante movimiento.&lt;/p>
&lt;h3 id="cd-en-aplicaciones-nativas">CD en aplicaciones nativas&lt;/h3>
&lt;p>Cuando tu producto incorpora una app nativa, sabemos que lo suyo es hacerla pasar por las correspondientes stores para su distribuci√≥n. En un servidor web, nadie te va a decir que no puedes subir una web porque el contenido no es super bonito, o no est√° claro, o porque falta una captura en la descripci√≥n de producto o un video explainer (s√≠ s√≠, apple se gusta un mont√≥n pidiendo este tipo de mierdas para aprobarte la publicaci√≥n). El escenario ideal en nuestro caso ser√≠a el mismo que tenemos para las aplicaciones web&amp;hellip; un entorno con CD que suele ser nuestro entorno de beta/pruebas que tiene todo lo √∫ltimo&amp;hellip; y luego tenemos el paso a producci√≥n que depende de que pulsemos el bot√≥n de la release correspondiente. Es nuestro escenario, no quiero decir que sea el universal ni nada por el estilo&amp;hellip; es una pol√≠tica de despliegues que en nuestro caso funciona y otro equipo podr√≠a optar por montar una estrategia de ramas y entornos diferente.&lt;/p>
&lt;h3 id="como-planteamos-este-escenario-en-engloba-tech-desde-app-center">Como planteamos este escenario en Engloba Tech desde App Center&lt;/h3>
&lt;p>En App Center lo montamos un poco diferente a como solemos hacerlo en web, tenemos una rama &amp;ldquo;x&amp;rdquo; que es la que se alinea con nuestro entorno pruebas. Esta rama tiene una build que se distribuye a colaboradores (testers, normalmente nosotros y alg√∫n usuario clave de negocio), esta rama por tanto si que est√° automatizada pero la distruci√≥n es mediante App Center y correos&amp;hellip; no pasamos por la store lo cual no es una app v√°lida para el usuario en el sentido que tiene que habilitarse movidas en android para poder usar la app (en ios peor, tienes que vincular el device ID al provisioning profile de la app, un foll√≥n a√±adir un tester)&amp;hellip; la distribuci√≥n anterior nos sirve para testear la evoluci√≥n y una vez ok pasamos a la store.&lt;/p>
&lt;p>Te preguntar√°s como gestionamos la transformaci√≥n de settings entre un entorno u otro. Lo hacemos jugando con esta secci√≥nd de la build y luego leyendo ese fichero .env desde React Native.&lt;/p>
&lt;p>&lt;img src="https://engloba-tech.github.io/blog/public/images/AppCenter-Build-Env-Variables.PNG" alt="Managing env variables in App Center build" title="Managing env variables in App Center build">&lt;/p>
&lt;p>Y en master tenemos configurada la build que va a las stores donde metemos los valores de producci√≥n en los settings de entorno. De este modo al hacer una PR y aprobarla de rama &amp;ldquo;x&amp;rdquo; a master har√° que se lance el proceso de publicaci√≥n a las correspondientes stores.&lt;/p>
&lt;h3 id="evitando-pasos-manuales">Evitando pasos manuales&lt;/h3>
&lt;p>¬øEs posible automatizar la subida a la store desde App Center?, La respuesta es s√≠&amp;hellip; pero eso no quiero decir que tu aplicaci√≥n est√© disponible desde el momento que acaba la release a la store&amp;hellip; tanto Google como Apple tendr√°n que validar la publicaci√≥n y puede tardar unos d√≠as o incluso que te la deniegen por alg√∫n motivo. Esto es un poco jodienda la verdad, porque si el producto web/api/dominio evoluciona a un ritmo tienes que ir con cuidado que no se rompa la app que consume estas apis&amp;hellip; Es posible que te toque cambiar ese V1 que la mayor√≠a solemos meter en nuestras apis por defecto pero que a la hora de la verdad pocas veces te toca mantener versionado en serio en tus apis&amp;hellip;&lt;/p>
&lt;p>Veamos como automatizar esto desde App Center, en realidad es muy sencillo si ya te mueves bien por App Center y las correspondientes stores. La primera subida no queda otra que hacerla a mano, √°nimo jaja.&lt;/p>
&lt;p>Una vez ya tienes la primera subida detallo los pasos necesarios para automatizar la publicaci√≥n a las stores.&lt;/p>
&lt;h3 id="google-play">Google Play&lt;/h3>
&lt;p>Necesitas una developer account, una vez dentro has de crear una cuenta de servicio que pueda acceder a la api. Lo haremos siguiendo los pasos que ves en las capturas.&lt;/p>
&lt;p>&lt;img src="https://engloba-tech.github.io/blog/public/images/GooglePlay-Api-Access.PNG" alt="Create service account in Google Play Api" title="Create service account in Google Play Api">&lt;/p>
&lt;p>Una vez pulsas en Crear Cuenta de Servicio te dirige a la p√°gina de Google Cloud Platform donde puedes crear cuentas de servicio y vincular &amp;ldquo;keys&amp;rdquo; (p12 o json).&lt;/p>
&lt;p>&lt;img src="https://engloba-tech.github.io/blog/public/images/Create-Service-Account-Json-Key.PNG" alt="Creating Api Key and Downloading Json" title="Creating Api Key and Downloading Json">&lt;/p>
&lt;p>Descargamos la clave y nos vamos a App Center, vamos a distribute y configuramos el acceso a Google Play subiendo la clave que hemos descargado.&lt;/p>
&lt;p>&lt;img src="https://engloba-tech.github.io/blog/public/images/Create-Service-Account-Json-Key.PNG" alt="Creating Api Key and Downloading Json" title="Creating Api Key and Downloading Json">&lt;/p>
&lt;p>Una vez tenemos la store vinculada ya podemos seleccionarla en nuestra build Android/Master.&lt;/p>
&lt;p>&lt;img src="https://engloba-tech.github.io/blog/public/images/Distribute-Store-AppCenter.PNG" alt="Select Distribute To Store in Distribution Section" title="Select Distribute To Store in Distribution Section">&lt;/p>
&lt;p>Con esto ya tendr√≠amos automatizada la publicaci√≥n para Google Play de modo que un commit en master de la app lanza el proceso.&lt;/p>
&lt;h3 id="apple-store">Apple Store&lt;/h3>
&lt;p>Para Apple pues vas a App Center a la app de iOS y en Distribute vamos a Store (igual que para Android).&lt;/p>
&lt;p>Te pedir√° tus credenciales del Apple ID con el que tienes cuenta en Apple developer y has registrado la app la primera vez&amp;hellip; Introduces credenciales y como mucho si tienes doble factor de autentiaci√≥n en tu cuenta (imagino que s√≠) te har√° generar claves para uso de apps que ya ver√°s que el mismo asistente en App Center te gu√≠a para hacerlo y es f√°cil.&lt;/p>
&lt;p>Ahora tendr√≠as que hacer exactamente lo mismo que hemos hecho para Android, ir a la build de master y en la secci√≥n Distribute seleccionar Store y Production.&lt;/p>
&lt;p>Tambi√©n podr√≠as distribuir una release existente de modo manual. Si te vas a la release una vez has configurado la store, te sale como una opci√≥n m√°s de distribuci√≥n.
&lt;img src="https://engloba-tech.github.io/blog/public/images/Distribute-Apple-Store-AppCenter.PNG" alt="Manually distributing a existing release to Apple Store" title="Manually distributing a existing release to Apple Store">&lt;/p>
&lt;p>Con esto ya tendr√≠amos automatizada la publicaci√≥n en las tiendas!&lt;/p></description></item><item><title>Configurando Serilog contra Application Insights en nuestra aplicaci√≥n web Asp.Net</title><link>https://engloba-tech.github.io/blog/public/posts/serilog/</link><pubDate>Wed, 30 Dec 2020 08:40:44 +0100</pubDate><guid>https://engloba-tech.github.io/blog/public/posts/serilog/</guid><description>
&lt;p>La monitorizaci√≥n es un aspecto importante de nuestras aplicaciones üìà. Si tienes la insfraestructura en Azure lo m√°s t√≠pico ser√≠a usar Application Insights / Azure Monitor como &amp;ldquo;recolector/servicio&amp;rdquo; de m√©tricas e incluso visor (para visualizar m√©tricas al final del post mencionar√© algunas alternativas).&lt;/p>
&lt;p>Si usas app services de Azure, tener un site monitorizado en Azure Monitor es cuesti√≥n de minutos&amp;hellip; lo puedes hacer desde el portal, pulsando a√±adir application insights y configurando el setting de la instrumentation key. Esto ya har√° que puedas consumir ese resource App Insights que has creado para recolectar m√©tricas del site y ver m√©tricas interesantes como n√∫mero de peticiones, ver agregados de peticiones por c√≥digos de respuesta, tiempo medio respuesta, etc&amp;hellip; Ok, pero que pasa si quiero analizar porque se ha producido un 500 o hacer seguimiento de un hilo de peticiones m√°s complejo. Si no configuramos &amp;ldquo;algo m√°s&amp;rdquo; en la api vamos un poco a ciegas cuando queremos ver m√°s en detalle.&lt;/p>
&lt;p>.Net como framework incorpora su api para &lt;a href="https://docs.microsoft.com/es-es/aspnet/core/fundamentals/logging/?view=aspnetcore-5.0">logging&lt;/a> aunque solemos configurar alg√∫n paquete que nos ayude con la gesti√≥n de todo esto en nuestras aplicaciones. Tienes varias opciones como Log4Net, Nlog (&amp;hellip;). En nuestro caso usaremos Serilog.&lt;/p>
&lt;h3 id="como-configurar-serilog-en-aspnet-31">Como configurar Serilog en Asp.Net 3.1&lt;/h3>
&lt;p>En primer lugar aseg√∫rate de tener App Insights Telemetry registrado en la api, ya que serilog &amp;ldquo;volcar√°&amp;rdquo; lo que vaya colectando a un registro que podr√≠a ser una base de datos, un fichero o en este caso un servicio en el cloud como es Azure Monitor / Application Insights.&lt;/p>
&lt;p>A√±ade el paquete Microsoft.ApplicationInsights.AspNetCore a tu Host.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-xml" data-lang="xml"> &lt;span style="color:#f92672">&amp;lt;PackageReference&lt;/span> &lt;span style="color:#a6e22e">Include=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Microsoft.ApplicationInsights.AspNetCore&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Version=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;2.16.0&amp;#34;&lt;/span> &lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Configura el middleware en tu configuraci√≥n de arranque:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java"> services&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">AddApplicationInsightsTelemetry&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Para usar Serilog contra AppInsights necesitaremos estos 3 paquetes:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-xml" data-lang="xml"> &lt;span style="color:#f92672">&amp;lt;PackageReference&lt;/span> &lt;span style="color:#a6e22e">Include=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Serilog.AspNetCore&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Version=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;3.4.0&amp;#34;&lt;/span> &lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;span style="color:#f92672">&amp;lt;PackageReference&lt;/span> &lt;span style="color:#a6e22e">Include=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Serilog.Settings.Configuration&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Version=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;3.1.0&amp;#34;&lt;/span> &lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;span style="color:#f92672">&amp;lt;PackageReference&lt;/span> &lt;span style="color:#a6e22e">Include=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Serilog.Sinks.ApplicationInsights&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Version=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;3.1.0&amp;#34;&lt;/span> &lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Ahora el siguiente paso ser√≠a configurar serilog en el arranque de nuestra aplicaci√≥n asp.net normalmente en la clase Program.cs. Nos interesa configurar aqu√≠ ya Serilog porque normalmente en nuestras apis solemos tener un seed b√°sico de datos y de este modo registrar√≠amos si se podruciese alg√∫n fallo en este proceso.&lt;/p>
&lt;p>Nuestro c√≥digo pinta as√≠, lo importante es como nos traemos el logger de la configuraci√≥n de la api y como luego le decimos que &amp;ldquo;escriba&amp;rdquo; los registros en App Insights.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java"> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> async Task &lt;span style="color:#a6e22e">Main&lt;/span>&lt;span style="color:#f92672">(&lt;/span>string&lt;span style="color:#f92672">[]&lt;/span> args&lt;span style="color:#f92672">)&lt;/span>
&lt;span style="color:#f92672">{&lt;/span>
var host &lt;span style="color:#f92672">=&lt;/span> BuildWebHost&lt;span style="color:#f92672">(&lt;/span>args&lt;span style="color:#f92672">);&lt;/span>
using &lt;span style="color:#f92672">(&lt;/span>var scope &lt;span style="color:#f92672">=&lt;/span> host&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">Services&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">CreateScope&lt;/span>&lt;span style="color:#f92672">())&lt;/span>
&lt;span style="color:#f92672">{&lt;/span>
var services &lt;span style="color:#f92672">=&lt;/span> scope&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">ServiceProvider&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
var logger &lt;span style="color:#f92672">=&lt;/span> services&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">GetRequiredService&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>ILogger&lt;span style="color:#f92672">&amp;lt;&lt;/span>Program&lt;span style="color:#f92672">&amp;gt;&amp;gt;();&lt;/span>
&lt;span style="color:#66d9ef">try&lt;/span>
&lt;span style="color:#f92672">{&lt;/span>
var environment &lt;span style="color:#f92672">=&lt;/span> services&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">GetRequiredService&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>IWebHostEnvironment&lt;span style="color:#f92672">&amp;gt;();&lt;/span>
var builder &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> ConfigurationBuilder&lt;span style="color:#f92672">()&lt;/span>
&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">SetBasePath&lt;/span>&lt;span style="color:#f92672">(&lt;/span>environment&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">ContentRootPath&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">AddJsonFile&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;appsettings.json&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#66d9ef">false&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
var config &lt;span style="color:#f92672">=&lt;/span> builder&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">Build&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
await DbInitializer&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">InitializeDatabaseAsync&lt;/span>&lt;span style="color:#f92672">(&lt;/span>config&lt;span style="color:#f92672">,&lt;/span> services&lt;span style="color:#f92672">,&lt;/span> environment&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#66d9ef">catch&lt;/span> &lt;span style="color:#f92672">(&lt;/span>Exception ex&lt;span style="color:#f92672">)&lt;/span>
&lt;span style="color:#f92672">{&lt;/span>
logger&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">LogError&lt;/span>&lt;span style="color:#f92672">(&lt;/span>ex&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">GetInnerException&lt;/span>&lt;span style="color:#f92672">());&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
host&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">Run&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java"> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> IWebHost &lt;span style="color:#a6e22e">BuildWebHost&lt;/span>&lt;span style="color:#f92672">(&lt;/span>string&lt;span style="color:#f92672">[]&lt;/span> args&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">=&amp;gt;&lt;/span>
WebHost&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">CreateDefaultBuilder&lt;/span>&lt;span style="color:#f92672">(&lt;/span>args&lt;span style="color:#f92672">)&lt;/span>
&lt;span style="color:#f92672">...&lt;/span>
&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">UseStartup&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>Startup&lt;span style="color:#f92672">&amp;gt;()&lt;/span>
&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">UseSerilog&lt;/span>&lt;span style="color:#f92672">((&lt;/span>hostingContext&lt;span style="color:#f92672">,&lt;/span> loggerConfiguration&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">=&amp;gt;&lt;/span> loggerConfiguration
&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">ReadFrom&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">Configuration&lt;/span>&lt;span style="color:#f92672">(&lt;/span>hostingContext&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">Configuration&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">WriteTo&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">ApplicationInsights&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#66d9ef">new&lt;/span> TelemetryConfiguration &lt;span style="color:#f92672">{&lt;/span>
InstrumentationKey &lt;span style="color:#f92672">=&lt;/span> hostingContext&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">Configuration&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">GetValue&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>string&lt;span style="color:#f92672">&amp;gt;(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;ApplicationInsights:InstrumentationKey&amp;#34;&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;span style="color:#f92672">},&lt;/span> TelemetryConverter&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">Traces&lt;/span>&lt;span style="color:#f92672">))&lt;/span>
&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">Build&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Por otro lado en nuestro caso solemos configurar un filtro de excepciones a nivel de aplicaci√≥n de modo que si se genera una excepci√≥n no controlada siempre entrar√° en el filtro&amp;hellip; all√≠ tambi√©n usamos serilog.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java"> services&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">AddMvc&lt;/span>&lt;span style="color:#f92672">(&lt;/span>options &lt;span style="color:#f92672">=&amp;gt;&lt;/span>
&lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#f92672">...&lt;/span>
options&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">Filters&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">Add&lt;/span>&lt;span style="color:#f92672">(&lt;/span>typeof&lt;span style="color:#f92672">(&lt;/span>ExceptionFilter&lt;span style="color:#f92672">));&lt;/span>
&lt;span style="color:#f92672">...&lt;/span>
&lt;span style="color:#f92672">})&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Y hasta aqu√≠ el post b√°sico sobre como configurar serilog en asp.net contra Application Insights. Como disclaimer a√±adir que por los tiempos que corren quiz√°s deber√≠amos ir pensando de movernos a .net 5.0&amp;hellip; en fin no tardaremos.&lt;/p></description></item><item><title>Depurar mi c√≥digo en una aplicaci√≥n hospedada en App Service de Azure</title><link>https://engloba-tech.github.io/blog/public/posts/debug-appservice/</link><pubDate>Wed, 30 Dec 2020 08:40:44 +0100</pubDate><guid>https://engloba-tech.github.io/blog/public/posts/debug-appservice/</guid><description>
&lt;p>Depurar tu c√≥digo C# en Azure App Service es bastante sencillo y &amp;hellip; extra√±o üòÉ. Me explico es raro que necesites depurar tu c√≥digo una vez est√° desplegado, tiene que ser algo rebuscado sino siempre entiendo que tirar√°s antes de logs. En fin, veamos como depurar en app service. Para depurar tu c√≥digo necesitas Visual Studio (est√° la versi√≥n community que es free) y necesitar√°s publicar los s√≠mbolos de tu aplicaci√≥n. Te recomiendo por eso que s√≥lo publiques s√≠mbolos cuando sea necesario&amp;hellip; Por ejemplo podr√≠as hacer una release temporal para ver un problema en modo debug y una vez hayas acabado volver a desplegar en modo release.&lt;/p>
&lt;h3 id="como-p√∫blicar-los-s√≠mbolos-pdb">Como p√∫blicar los s√≠mbolos (pdb)&lt;/h3>
&lt;p>Los s√≠mbolos son esos archivos pdb que se generan cuando estamos corriendo nuestra aplicaci√≥n en modo Debug. Por normal general si corres en modo Debug se publican s√≠mbolos y si lanzas modo Release no se publicar√°n&amp;hellip; sin m√°s. Si tienes definida integraci√≥n continua con Azure Dev Ops, Jenkins o algo de este estilo seguramente en la pipeline tengas definida una variable buildConfiguration (Azure DevOps te la mete por defecto si no estoy equivocado y tambi√©n te permite configurar si la variable es setteable en run time). Si no tienes CD a Azure y publicas con bot√≥n derecho pues selecciona Debug en el asistente ese que sale.&lt;/p>
&lt;h3 id="como-comprobar-que-los-s√≠mbolos-est√°n-en-app-service">Como comprobar que los s√≠mbolos est√°n en App Service&lt;/h3>
&lt;p>Hay varios modos de comprobarlo, la m√°s f√°cil y cutre es conectando el debugger al App Service. Si no hay s√≠mbolos se queja&amp;hellip; eso quiere decir que no est√°n üôà.&lt;/p>
&lt;p>Ahora en serio, tienes modos de examinar el contenido de tu App Service y comprobar si para cada assembly que necesitas depurar est√° su correspondiente .pdb. Desde el portal mismo, si entras al App Service y te fijas en la secci√≥n Development Tools.&lt;/p>
&lt;p>&lt;img src="https://engloba-tech.github.io/blog/public/images/AppService-Development-Tools.PNG" alt="App Service Development Tools" title="App Service Development Tools">&lt;/p>
&lt;p>Est√° por un lado Advanced Tools tambi√©n conocido como &lt;a href="https://github.com/projectkudu/kudu" title="Project's Kudu Github Repository">Kudu&lt;/a> (tiene api üíì) y por otro lado App Service Editor tambi√©n conocido como Monaco&amp;hellip; Usa el que quieras para listar el contenido del directorio wwwRoot que es donde est√°n los assemblies de tu aplicaci√≥n. Si usas Kudu lo tendr√°s que hacer desde la opci√≥n &amp;ldquo;Debug Console&amp;rdquo; y ah√≠ te puedes mover hasta el directorio.. De echo si te quedas un rato en el portal de Kudu ver√°s que si no lo conoc√≠as todav√≠a es oro&amp;hellip; tienes registros, profilings. De echo para &amp;ldquo;resolver misterios&amp;rdquo; en App Service son m√°s √∫til estas herramientas que no lo que estoy contando originalmente en el post üòÜ&lt;/p>
&lt;h3 id="conectar-visual-studio-a-appservice">Conectar Visual Studio a AppService&lt;/h3>
&lt;p>Aseg√∫rate que la versi√≥n del assembly que quieres depurar es la misma que tienes en local, por ejemplo si el entorno que vas a depurar tiene CD y est√° vinculado a master pues con situarte en master te valdr√≠a.&lt;/p>
&lt;p>Para conectar Visual Studio a AppService&lt;/p>
&lt;p>&lt;img src="images/Debug-AppService.PNG" alt="Debug AppService From Visual Studio" title="Debug AppService From Visual Studio">&lt;/p>
&lt;p>Esto llevar√° su ratito&amp;hellip; una vez visual studio se conecta al App Service te abre la web en cuesti√≥n en el browser&amp;hellip; a partir de ah√≠ ya puedes poner breakpoints y depurar lo que necesites. Por cierto si has le√≠do este post te recomiendo leer un post al que llegu√© por twitter en el que se profundiza m√°s en kudu y estas movidas.&lt;/p>
&lt;p>Hasta aqu√≠ este post, es muy b√°sico pero me ha servido para vencer finalmente la procastinaci√≥n y retomar lo de escribir en blogs que ya hace un par de a√±os que no lo hac√≠a y se echa de menos!!&lt;/p></description></item></channel></rss>