<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>C# on Engloba Tech - Blog</title><link>https://engloba-tech.github.io/blog/public/tags/c#/</link><description>Recent content in C# on Engloba Tech - Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 15 Mar 2021 08:10:44 +0100</lastBuildDate><atom:link href="https://engloba-tech.github.io/blog/public/tags/c#/index.xml" rel="self" type="application/rss+xml"/><item><title>Migrando una Api de dotnet 3.1.x a 5.0.x</title><link>https://engloba-tech.github.io/blog/public/posts/from-net3.1-to-net5.0/</link><pubDate>Mon, 15 Mar 2021 08:10:44 +0100</pubDate><guid>https://engloba-tech.github.io/blog/public/posts/from-net3.1-to-net5.0/</guid><description>
&lt;p>Hoy me dispongo a migrar una api rest &amp;ldquo;sencilla&amp;rdquo; a la versi√≥n m√°s reciente de dotnet que en estos momentos es 5.0.
En primer lugar necesitar√°s instalarte el &lt;a href="https://dotnet.microsoft.com/download/dotnet/5.0" title="net5 sdk download page">SDK&lt;/a> en tu m√°quina local de desarrollo si no lo has hecho ya.&lt;/p>
&lt;p>Esta api tiene lo t√≠pico, EF, MediatR, Auth, poco m√°s.. Vamos a ello, en los proyectos que componen la soluci√≥n modificar√© el atributo TargetFramework y los paquetes como indican en la gu√≠a de migraci√≥n. Pero la primera duda que me surge es que pasa con los proyectos que apuntan a NetStandard, en esta soluci√≥n tenemos un par.&lt;/p>
&lt;p>Como explican &lt;a href="https://docs.microsoft.com/es-es/dotnet/standard/net-standard#net-5-and-net-standard" title="net 5 and the net standard">aqu√≠&lt;/a>, podr√≠amos mantener NetStandar 2.0/2.1 siempre y cuando necesitemos usar esa dll desde una aplicaci√≥n Net Framework. Realmente si nos paramos a pensar nosotros no tenemos Net Framework por tanto tampoco tiene demasiado sentido apuntar a Net Standard en nuestro caso. En estos casos recomiendan apuntar tambi√©n estos paquetes a Net 5.&lt;/p>
&lt;p>Una vez actualizados los proyectos que componen la soluci√≥n, actualizaremos tambi√©n la imagen de aspnet en el docker file.&lt;/p>
&lt;p>Y&amp;hellip; bien, compila a la primera y desde swagger un GET me devuelve datos del seed. El siguiente paso es correr los test y&amp;hellip; bien pasan a la primera.&lt;/p>
&lt;p>&lt;img src="../../images/Running-integration-tests-in-Net-5.0.PNG" alt="Running integration tests in Net 5.0" title="Running integration tests in Net 5.0">&lt;/p>
&lt;p>A nivel visual studio no tendr√°s problemas para trabajar con net 5.0 siempre y cuando est√©s por encima de la versi√≥n 16.8.*.&lt;/p>
&lt;p>Por √∫ltimo, quedar√° ver si es necesario cambiar algo en las pipelines. Usamos un agente pr√≥pio que es un ubuntu VM en Azure, intuyo que nos tocar√° conectarnos al agente e instalar el SDK 5.0 como hemos hecho en nuestra m√°quina local. Una vez hecho funcionan las pipes sin problema, en principio el agente intentar√° construir las aplicaciones usando el √∫ltimo SDK instalado&amp;hellip; es decir intentar√° compilar con el SDK de 5.0 todas nuestras aplicaciones .NET. En principio deber√≠a ser capaz de compilar tambi√©n 3.1, en nuestro caso siguen funcionando todas las pipes sin problema pero podr√≠a darse el caso que necesites compilar una aplicaci√≥n con un SDK concreto.. en ese caso deber√≠amos usar el fichero global.json, aunque ya digo que en nuestro caso conviven 5.0/3.1 sin problema y sin necesidad de a√±adir ficheros global.json.&lt;/p>
&lt;h4 id="conclusiones">Conclusiones&lt;/h4>
&lt;p>Esto mismo que estamos haciendo hace 10 a√±os entre versiones de .net, es decir hacer un upgrade de framework de una parte del proyecto sin afectar al resto hubiese sido un reto en may√∫sculas. Kudos para Microsoft en general por haber enfocado bien estos √∫ltimos a√±os de evoluci√≥n en sus servicios y lenguajes..&lt;/p>
&lt;p>Tambi√©n entiendo que me ha sido todo tan f√°cil y he tenido 0 problemas porque me he esperado unos meses a pasarme a net 5 y no partimos de la primera minor ni de prereleases&amp;hellip; Esperar, si te lo puedes permitir, siempre es recomendable porque te aseguras que est√° m√°s maduro y por otro lado hay m√°s margen de tiempo para que los fabricantes de librer√≠as saquen el paquete compatible con la nueva versi√≥n.&lt;/p></description></item><item><title>Configurando Serilog contra Application Insights en nuestra aplicaci√≥n web Asp.Net</title><link>https://engloba-tech.github.io/blog/public/posts/serilog/</link><pubDate>Wed, 24 Feb 2021 08:40:44 +0100</pubDate><guid>https://engloba-tech.github.io/blog/public/posts/serilog/</guid><description>
&lt;p>La monitorizaci√≥n es un aspecto importante de nuestras aplicaciones üìà. Si tienes la insfraestructura en Azure lo m√°s t√≠pico ser√≠a usar Application Insights / Azure Monitor como saas de m√©tricas y usar el portal de Azure Monitor como visor.&lt;/p>
&lt;p>Si usas App Services de Azure, tener un site monitorizado en Azure Monitor es cuesti√≥n de minutos&amp;hellip; lo puedes hacer desde el portal, pulsando a√±adir Application Insights y configurando el setting de la instrumentation key. Esto ya har√° que puedas consumir ese resource App Insights que has creado para recolectar m√©tricas del site y ver m√©tricas interesantes como n√∫mero de peticiones, ver agregados de peticiones por c√≥digos de respuesta, tiempo medio respuesta, etc&amp;hellip; Ok, pero ¬øqu√© pasa si quiero analizar porqu√© se ha lanzado un 500 o hacer seguimiento de un hilo de peticiones m√°s complejo?. Si no configuramos &amp;ldquo;algo m√°s&amp;rdquo; en la api, vamos un poco a ciegas cuando queremos ver m√°s en detalle.&lt;/p>
&lt;p>.Net como framework incorpora su api para &lt;a href="https://docs.microsoft.com/es-es/aspnet/core/fundamentals/logging/?view=aspnetcore-5.0">logging&lt;/a> aunque solemos configurar alg√∫n paquete que nos ayude con la gesti√≥n de todo esto en nuestras aplicaciones. Tienes varias opciones como Log4Net, Nlog (&amp;hellip;). En nuestro caso usaremos Serilog.&lt;/p>
&lt;h3 id="como-configurar-serilog-en-aspnet-31">Como configurar Serilog en Asp.Net 3.1&lt;/h3>
&lt;p>En primer lugar aseg√∫rate de tener App Insights Telemetry registrado en la api, ya que serilog &amp;ldquo;volcar√°&amp;rdquo; lo que vaya colectando a un registro que podr√≠a ser una base de datos, un fichero o en este caso un servicio en el cloud como es Azure Monitor / Application Insights.&lt;/p>
&lt;p>A√±ade el paquete Microsoft.ApplicationInsights.AspNetCore a tu Host.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-xml" data-lang="xml"> &lt;span style="color:#f92672">&amp;lt;PackageReference&lt;/span> &lt;span style="color:#a6e22e">Include=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Microsoft.ApplicationInsights.AspNetCore&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Version=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;2.16.0&amp;#34;&lt;/span> &lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Configura el middleware en tu configuraci√≥n de arranque:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java"> services&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">AddApplicationInsightsTelemetry&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Para usar Serilog contra AppInsights necesitaremos estos 3 paquetes:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-xml" data-lang="xml"> &lt;span style="color:#f92672">&amp;lt;PackageReference&lt;/span> &lt;span style="color:#a6e22e">Include=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Serilog.AspNetCore&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Version=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;3.4.0&amp;#34;&lt;/span> &lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;span style="color:#f92672">&amp;lt;PackageReference&lt;/span> &lt;span style="color:#a6e22e">Include=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Serilog.Settings.Configuration&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Version=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;3.1.0&amp;#34;&lt;/span> &lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;span style="color:#f92672">&amp;lt;PackageReference&lt;/span> &lt;span style="color:#a6e22e">Include=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Serilog.Sinks.ApplicationInsights&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Version=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;3.1.0&amp;#34;&lt;/span> &lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Ahora el siguiente paso ser√≠a configurar serilog en el arranque de nuestra aplicaci√≥n Asp.Net normalmente en la clase Program.cs. Nos interesa configurar aqu√≠ ya Serilog porque normalmente en nuestras apis solemos tener un seed b√°sico de datos y de este modo registrar√≠amos si se podruciese alg√∫n fallo en este proceso.&lt;/p>
&lt;p>Nuestro c√≥digo pinta as√≠, lo importante es como nos traemos el logger de la configuraci√≥n de la api y como luego le decimos que &amp;ldquo;escriba&amp;rdquo; los registros en App Insights.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java"> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> async Task &lt;span style="color:#a6e22e">Main&lt;/span>&lt;span style="color:#f92672">(&lt;/span>string&lt;span style="color:#f92672">[]&lt;/span> args&lt;span style="color:#f92672">)&lt;/span>
&lt;span style="color:#f92672">{&lt;/span>
var host &lt;span style="color:#f92672">=&lt;/span> BuildWebHost&lt;span style="color:#f92672">(&lt;/span>args&lt;span style="color:#f92672">);&lt;/span>
using &lt;span style="color:#f92672">(&lt;/span>var scope &lt;span style="color:#f92672">=&lt;/span> host&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">Services&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">CreateScope&lt;/span>&lt;span style="color:#f92672">())&lt;/span>
&lt;span style="color:#f92672">{&lt;/span>
var services &lt;span style="color:#f92672">=&lt;/span> scope&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">ServiceProvider&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
var logger &lt;span style="color:#f92672">=&lt;/span> services&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">GetRequiredService&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>ILogger&lt;span style="color:#f92672">&amp;lt;&lt;/span>Program&lt;span style="color:#f92672">&amp;gt;&amp;gt;();&lt;/span>
&lt;span style="color:#66d9ef">try&lt;/span>
&lt;span style="color:#f92672">{&lt;/span>
var environment &lt;span style="color:#f92672">=&lt;/span> services&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">GetRequiredService&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>IWebHostEnvironment&lt;span style="color:#f92672">&amp;gt;();&lt;/span>
var builder &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> ConfigurationBuilder&lt;span style="color:#f92672">()&lt;/span>
&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">SetBasePath&lt;/span>&lt;span style="color:#f92672">(&lt;/span>environment&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">ContentRootPath&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">AddJsonFile&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;appsettings.json&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#66d9ef">false&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
var config &lt;span style="color:#f92672">=&lt;/span> builder&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">Build&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
await DbInitializer&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">InitializeDatabaseAsync&lt;/span>&lt;span style="color:#f92672">(&lt;/span>config&lt;span style="color:#f92672">,&lt;/span> services&lt;span style="color:#f92672">,&lt;/span> environment&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#66d9ef">catch&lt;/span> &lt;span style="color:#f92672">(&lt;/span>Exception ex&lt;span style="color:#f92672">)&lt;/span>
&lt;span style="color:#f92672">{&lt;/span>
logger&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">LogError&lt;/span>&lt;span style="color:#f92672">(&lt;/span>ex&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">GetInnerException&lt;/span>&lt;span style="color:#f92672">());&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
host&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">Run&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java"> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> IWebHost &lt;span style="color:#a6e22e">BuildWebHost&lt;/span>&lt;span style="color:#f92672">(&lt;/span>string&lt;span style="color:#f92672">[]&lt;/span> args&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">=&amp;gt;&lt;/span>
WebHost&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">CreateDefaultBuilder&lt;/span>&lt;span style="color:#f92672">(&lt;/span>args&lt;span style="color:#f92672">)&lt;/span>
&lt;span style="color:#f92672">...&lt;/span>
&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">UseStartup&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>Startup&lt;span style="color:#f92672">&amp;gt;()&lt;/span>
&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">UseSerilog&lt;/span>&lt;span style="color:#f92672">((&lt;/span>hostingContext&lt;span style="color:#f92672">,&lt;/span> loggerConfiguration&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">=&amp;gt;&lt;/span> loggerConfiguration
&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">ReadFrom&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">Configuration&lt;/span>&lt;span style="color:#f92672">(&lt;/span>hostingContext&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">Configuration&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">WriteTo&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">ApplicationInsights&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#66d9ef">new&lt;/span> TelemetryConfiguration &lt;span style="color:#f92672">{&lt;/span>
InstrumentationKey &lt;span style="color:#f92672">=&lt;/span> hostingContext&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">Configuration&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">GetValue&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>string&lt;span style="color:#f92672">&amp;gt;(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;ApplicationInsights:InstrumentationKey&amp;#34;&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;span style="color:#f92672">},&lt;/span> TelemetryConverter&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">Traces&lt;/span>&lt;span style="color:#f92672">))&lt;/span>
&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">Build&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Por otro lado en nuestro caso solemos configurar un filtro de excepciones a nivel de aplicaci√≥n de modo que si se genera una excepci√≥n no controlada siempre entrar√° en el filtro&amp;hellip; all√≠ tambi√©n usamos serilog.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java"> services&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">AddMvc&lt;/span>&lt;span style="color:#f92672">(&lt;/span>options &lt;span style="color:#f92672">=&amp;gt;&lt;/span>
&lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#f92672">...&lt;/span>
options&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">Filters&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">Add&lt;/span>&lt;span style="color:#f92672">(&lt;/span>typeof&lt;span style="color:#f92672">(&lt;/span>ExceptionFilter&lt;span style="color:#f92672">));&lt;/span>
&lt;span style="color:#f92672">...&lt;/span>
&lt;span style="color:#f92672">})&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Y hasta aqu√≠ el post b√°sico sobre como configurar serilog en asp.net contra Application Insights. Como disclaimer a√±adir que por los tiempos que corren quiz√°s deber√≠amos ir pensando de movernos a .net 5.0&amp;hellip; en fin no tardaremos.&lt;/p></description></item></channel></rss>